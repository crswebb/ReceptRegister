name: CI Build & Test

on:
  push:
    branches: ["**"]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  build-test:
    name: Build & Test (.NET)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: '10.0.x'
            cache: true

      - name: Restore
        run: dotnet restore ReceptRegister.sln

      - name: Build
        run: dotnet build ReceptRegister.sln --configuration Release --no-restore

      - name: Test
        run: dotnet test ReceptRegister.sln --configuration Release --no-build --logger "trx;LogFileName=test-results.trx" --collect:"XPlat Code Coverage"

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/TestResults/*.trx
            **/coverage.cobertura.xml
            **/coverage.info

      - name: Publish API (for inspection)
        run: dotnet publish ReceptRegister.Api/ReceptRegister.Api.csproj -c Release -o out/api

      - name: Upload API artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-publish
          path: out/api

      - name: Publish Frontend (for inspection)
        run: dotnet publish ReceptRegister.Frontend/ReceptRegister.Frontend.csproj -c Release -o out/frontend

      - name: Upload Frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-publish
          path: out/frontend

      - name: Generate Coverage Summary
        id: coverage
        run: |
          echo "Searching for cobertura file";
          FILE=$(git ls-files -z | tr '\0' '\n' | grep -E 'coverage.cobertura.xml$' || true)
          if [ -z "$FILE" ]; then
            echo "No coverage file found"; echo "found=false" >> $GITHUB_OUTPUT; exit 0; fi
          echo "found=true" >> $GITHUB_OUTPUT
          # Extract line-rate attribute
          RATE=$(grep -o 'line-rate="[0-9.]*"' "$FILE" | head -1 | sed -E 's/line-rate="([0-9.]+)"/\1/')
          PCT=$(python -c "rate='$RATE';\nimport sys;\ntry:\n print(f'{float(rate)*100:.2f}')\nexcept Exception:\n print('0.00')")
          echo "percentage=$PCT" >> $GITHUB_OUTPUT
          echo "file=$FILE" >> $GITHUB_OUTPUT

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request' && steps.coverage.outputs.found == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          message: |
            ## Code Coverage
            Coverage: **${{ steps.coverage.outputs.percentage }}%** (source: `${{ steps.coverage.outputs.file }}`)
            _Updated on push._
